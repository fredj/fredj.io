//var url = 'https://app.advanon.com/investor/investment_reports';
var url = 'investment-report.csv';

var MS_IN_DAY = 1000 * 60 * 60 * 24;

var parseDate = d3.timeParse('%d.%m.%Y');

var parseAmount = function(str) {
  return parseFloat(str.replace(/CHF/g, '').replace(/ /g, ''));
};

// roi amount at a given date
var roiAt = function(at, d) {
  if (at <= d.investment_date) {
    return 0;
  } else if (at >= d.repayment_date) {
    return d.roi;
  } else {
    var days = (at - d.investment_date) / MS_IN_DAY;
    console.assert(days < d.duration);
    return days * d.roi / d.duration;
  }
};


// csv line parser
var row = function(d) {
  var investment_date = parseDate(d['Financed']);
  if (investment_date) {
    var roi = parseAmount(d['Return on investment']);
    var investment = parseAmount(d['Investment']);
    var repayment_date =  parseDate(d['Repayment date']);

    // don't use 'Number of days' because the repayment delay
    // is not taken into account.
    var duration = (repayment_date - investment_date) / MS_IN_DAY;

    return {
      company: d['Company'],
      investment_date: investment_date,
      investment_amount: investment,
      duration: duration,
      repayment_date: repayment_date,
      repayment_amount: investment + roi,
      roi: roi
    };
  }
};

var margin = {top: 20, right: 20, bottom: 30, left: 50};
var width = 960 - margin.left - margin.right;
var height = 500 - margin.top - margin.bottom;

var x = d3.scaleTime().range([0, width]);
var y = d3.scaleLinear().range([height, 0]);

var xaxis = d3.axisBottom(x);
var yaxis = d3.axisLeft(y);

var svg = d3.select('body').append('svg')
  .attr('width', width + margin.left + margin.right)
  .attr('height', height + margin.top + margin.bottom)
  .append('g')
  .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

var line = d3.line()
  .x(function(d) { return x(d.date); })
  .y(function(d) { return y(d.value); });


d3.csv(url, row, function(error, data) {

  var points = [];
  data.forEach(function(d, i, data) {
    d.y0 = d3.sum(data.map(roiAt.bind(undefined, d.investment_date)));
    d.y1 = d3.sum(data.map(roiAt.bind(undefined, d.repayment_date)));
    points.push({
      date: d.investment_date,
      value: d.y0
    }, {
      date: d.repayment_date,
      value: d.y1
    });
  });
  console.assert(points.length === data.length * 2);

  points = points.sort(function(a, b) {
    return a.date - b.date;
  });

  x.domain([
    d3.min(points, function(d) { return d.date; }),
    d3.max(points, function(d) { return d.date; })
  ]);
  y.domain([0, d3.max(points, function(d) { return d.value; })]);

  svg.append('g')
    .attr('transform', 'translate(0,' + height + ')')
    .call(xaxis);

  svg.append('g')
    .call(yaxis);

  svg.append('path')
    .datum(points)
    .attr('class', 'cumulative')
    .attr('d', line);

  // svg.selectAll().data(data).enter()
  //   .append('polygon')
  //   .attr('class', 'cumulative')
  //   .attr('points', function(d) {
  //     var x0 = x(d.investment_date);
  //     var y0 = y(d.y0);
  //     var x1 = x(d.repayment_date);
  //     var y1 = y(d.y1);

  //     return [[x0, y(0)], [x0, y0], [x1, y1], [x1, y(0)]].join(' ');
  //   })
  //   .append("svg:title")
  //   .text(function(d) { return d.company; });
});
